// $ANTLR 2.7.7 (20060906): "nanosql.g" -> "NanoSqlLexer.java"$

  /**
   * Copyright (c) 2005-2011 by the California Institute of Technology.
   * All rights reserved.
   */
  package edu.caltech.nanodb.sqlparse;

  import java.util.ArrayList;
  import java.util.List;

  import edu.caltech.nanodb.commands.*;
  import edu.caltech.nanodb.expressions.*;
  import edu.caltech.nanodb.relations.*;

public interface NanoSqlParserTokenTypes {
	int EOF = 1;
	int NULL_TREE_LOOKAHEAD = 3;
	int ADD = 4;
	int ALL = 5;
	int ALTER = 6;
	int ANALYZE = 7;
	int AND = 8;
	int ANY = 9;
	int AS = 10;
	int ASC = 11;
	int AVG = 12;
	int BEGIN = 13;
	int BETWEEN = 14;
	int BY = 15;
	int COLUMN = 16;
	int COMMIT = 17;
	int CONSTRAINT = 18;
	int COUNT = 19;
	int CREATE = 20;
	int CROSS = 21;
	int DEFAULT = 22;
	int DELETE = 23;
	int DESC = 24;
	int DISTINCT = 25;
	int DROP = 26;
	int EXISTS = 27;
	int EXIT = 28;
	int EXPLAIN = 29;
	int FALSE = 30;
	int FOREIGN = 31;
	int FROM = 32;
	int FULL = 33;
	int IF = 34;
	int IN = 35;
	int INDEX = 36;
	int INNER = 37;
	int INSERT = 38;
	int INTO = 39;
	int IS = 40;
	int JOIN = 41;
	int KEY = 42;
	int LEFT = 43;
	int LIKE = 44;
	int MAX = 45;
	int MIN = 46;
	int NATURAL = 47;
	int NOT = 48;
	int NULL = 49;
	int ON = 50;
	int OR = 51;
	int ORDER = 52;
	int OUTER = 53;
	int PRIMARY = 54;
	int QUIT = 55;
	int REFERENCES = 56;
	int RENAME = 57;
	int RIGHT = 58;
	int ROLLBACK = 59;
	int SELECT = 60;
	int SET = 61;
	int SOME = 62;
	int START = 63;
	int STDDEV = 64;
	int SUM = 65;
	int TABLE = 66;
	int TO = 67;
	int TRANSACTION = 68;
	int TRUE = 69;
	int UNIQUE = 70;
	int UNKNOWN = 71;
	int UPDATE = 72;
	int USING = 73;
	int VALUES = 74;
	int VARIANCE = 75;
	int VERBOSE = 76;
	int VIEW = 77;
	int WHERE = 78;
	int WORK = 79;
	int TYPE_BIGINT = 80;
	int TYPE_BLOB = 81;
	int TYPE_CHAR = 82;
	int TYPE_CHARACTER = 83;
	int TYPE_DATE = 84;
	int TYPE_DATETIME = 85;
	int TYPE_DECIMAL = 86;
	int TYPE_FLOAT = 87;
	int TYPE_DOUBLE = 88;
	int TYPE_INT = 89;
	int TYPE_INTEGER = 90;
	int TYPE_NUMERIC = 91;
	int TYPE_TEXT = 92;
	int TYPE_TIME = 93;
	int TYPE_TIMESTAMP = 94;
	int TYPE_VARCHAR = 95;
	int TYPE_VARYING = 96;
	int INT_LITERAL = 97;
	int LONG_LITERAL = 98;
	int FLOAT_LITERAL = 99;
	int DEC_LITERAL = 100;
	int PERIOD = 101;
	int SEMICOLON = 102;
	int IDENT = 103;
	int QUOTED_IDENT = 104;
	int TEMPORARY = 105;
	int LPAREN = 106;
	int COMMA = 107;
	int RPAREN = 108;
	int GROUP = 109;
	int HAVING = 110;
	int STAR = 111;
	int EQUALS = 112;
	int NOT_EQUALS = 113;
	int GRTR_THAN = 114;
	int LESS_THAN = 115;
	int GRTR_EQUAL = 116;
	int LESS_EQUAL = 117;
	int PLUS = 118;
	int MINUS = 119;
	int SLASH = 120;
	int PERCENT = 121;
	int STRING_LITERAL = 122;
	int COLON = 123;
	int NEWLINE = 124;
	int WS = 125;
	int COMMENT = 126;
	int COMPARE_OPERATOR = 127;
	int NUM_LITERAL_OR_SYMBOL = 128;
}
